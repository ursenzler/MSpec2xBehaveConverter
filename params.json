{"name":"Mspec2xbehaveconverter","tagline":"Helps to migrate from Machine.Specifications to xBehave","body":"# Machine.Specifications to xBehave.net converter\r\n\r\nHelps to migrate specifications or tests made with MSpec to xBehave.net by doing all the syntax replacement for you.\r\n\r\n# Scenarios\r\nSee samples on how to migrate specifications.\r\n\r\n## Happy case\r\n\r\nMSpec:\r\n```\r\nnamespace Appccelerate.EvaluationEngine\r\n{\r\n    using FluentAssertions;\r\n    using Machine.Specifications;\r\n\r\n    [Subject(\"Question answering\")]\r\n    public class When_calling_answer_with_expressions_with_constraints\r\n    {\r\n        private const string NoConstraint = \"N\";\r\n        private const string WithTrueConstraint = \"T\";\r\n        private const string WithFalseConstraint = \"F\";\r\n\r\n        private static IEvaluationEngine engine;\r\n\r\n        private static string answer;\r\n\r\n        Establish context = () =>\r\n            {\r\n                engine = new EvaluationEngine();\r\n\r\n                engine.Solve<WhatIsTheText, string>()\r\n                    .AggregateWithExpressionAggregator(string.Empty, (aggregate, value) => aggregate + value)\r\n                    .ByEvaluating((q, p) => NoConstraint)\r\n                    .When(q => false)\r\n                        .ByEvaluating((q, p) => WithFalseConstraint)\r\n                    .When(q => true)\r\n                        .ByEvaluating((q, p) => WithTrueConstraint);\r\n            };\r\n\r\n        Because of = () =>\r\n            {\r\n                answer = engine.Answer(new WhatIsTheText());\r\n            };\r\n\r\n        It should_evaluate_expressions_without_constraints = () => \r\n            answer.Should().Contain(NoConstraint);\r\n\r\n        It should_evaluate_expressions_with_fulfilled_constraints = () => \r\n            answer.Should().Contain(WithTrueConstraint);\r\n\r\n        It should_ignore_expressions_with_constraints_that_are_not_fulfilled = () => \r\n            answer.Should().NotContain(WithFalseConstraint);\r\n    }\r\n}\r\n```\r\n\r\nAfter automatic conversion:\r\n```\r\nnamespace Appccelerate.EvaluationEngine\r\n{\r\n    using FluentAssertions;\r\n    using Xbehave;\r\n\r\n    public partial class Question_answering\r\n    {\r\n        [Scenario]\r\n        public void When_calling_answer_with_expressions_with_constraints()\r\n        {\r\n        private const string NoConstraint = \"N\";\r\n        private const string WithTrueConstraint = \"T\";\r\n        private const string WithFalseConstraint = \"F\";\r\n\r\n            IEvaluationEngine engine = null;\r\n\r\n            string answer = null;\r\n\r\n            \"establish\"._(() =>\r\n            {\r\n                engine = new EvaluationEngine();\r\n\r\n                engine.Solve<WhatIsTheText, string>()\r\n                    .AggregateWithExpressionAggregator(string.Empty, (aggregate, value) => aggregate + value)\r\n                    .ByEvaluating((q, p) => NoConstraint)\r\n                    .When(q => false)\r\n                        .ByEvaluating((q, p) => WithFalseConstraint)\r\n                    .When(q => true)\r\n                        .ByEvaluating((q, p) => WithTrueConstraint);\r\n            });\r\n\r\n            \"when calling answer with expressions with constraints\"._(() =>\r\n            {\r\n                answer = engine.Answer(new WhatIsTheText());\r\n            });\r\n\r\n            \"it should evaluate expressions without constraints\"._(() =>\r\n            {\r\n                answer.Should().Contain(NoConstraint);\r\n            });\r\n\r\n            \"it should evaluate expressions with fulfilled constraints\"._(() =>\r\n            {\r\n                answer.Should().Contain(WithTrueConstraint);\r\n            });\r\n\r\n            \"it should ignore expressions with constraints that are not fulfilled\"._(() =>\r\n            {\r\n                answer.Should().NotContain(WithFalseConstraint);\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRemove `private` from constant definitions:\r\n```\r\nnamespace Appccelerate.EvaluationEngine\r\n{\r\n    using FluentAssertions;\r\n    using Xbehave;\r\n\r\n    public partial class Question_answering\r\n    {\r\n        [Scenario]\r\n        public void When_calling_answer_with_expressions_with_constraints()\r\n        {\r\n            const string NoConstraint = \"N\";\r\n            const string WithTrueConstraint = \"T\";\r\n            const string WithFalseConstraint = \"F\";\r\n\r\n            IEvaluationEngine engine = null;\r\n\r\n            string answer = null;\r\n\r\n            \"establish\"._(() =>\r\n            {\r\n                engine = new EvaluationEngine();\r\n\r\n                engine.Solve<WhatIsTheText, string>()\r\n                    .AggregateWithExpressionAggregator(string.Empty, (aggregate, value) => aggregate + value)\r\n                    .ByEvaluating((q, p) => NoConstraint)\r\n                    .When(q => false)\r\n                        .ByEvaluating((q, p) => WithFalseConstraint)\r\n                    .When(q => true)\r\n                        .ByEvaluating((q, p) => WithTrueConstraint);\r\n            });\r\n\r\n            \"when calling answer with expressions with constraints\"._(() =>\r\n            {\r\n                answer = engine.Answer(new WhatIsTheText());\r\n            });\r\n\r\n            \"it should evaluate expressions without constraints\"._(() =>\r\n            {\r\n                answer.Should().Contain(NoConstraint);\r\n            });\r\n\r\n            \"it should evaluate expressions with fulfilled constraints\"._(() =>\r\n            {\r\n                answer.Should().Contain(WithTrueConstraint);\r\n            });\r\n\r\n            \"it should ignore expressions with constraints that are not fulfilled\"._(() =>\r\n            {\r\n                answer.Should().NotContain(WithFalseConstraint);\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis spec is runnable.\r\n\r\nNow let's finish with some clean-up:\r\n* move locals to method parameters (Ctrl+R, Ctrl+P in R#)\r\n* remove partial (not needed in this scenario)\r\n* better naming instead of `establish`\r\n* shorten the scenario name\r\n```\r\nnamespace Appccelerate.EvaluationEngine\r\n{\r\n    using FluentAssertions;\r\n    using Xbehave;\r\n\r\n    public class Question_answering\r\n    {\r\n        [Scenario]\r\n        public void Constraints(\r\n            IEvaluationEngine engine, \r\n            string answer)\r\n        {\r\n            const string NoConstraint = \"N\";\r\n            const string WithTrueConstraint = \"T\";\r\n            const string WithFalseConstraint = \"F\";\r\n\r\n            \"establish an evaluation engine with constraint expressions\"._(() =>\r\n            {\r\n                engine = new EvaluationEngine();\r\n\r\n                engine.Solve<WhatIsTheText, string>()\r\n                    .AggregateWithExpressionAggregator(string.Empty, (aggregate, value) => aggregate + value)\r\n                    .ByEvaluating((q, p) => NoConstraint)\r\n                    .When(q => false)\r\n                        .ByEvaluating((q, p) => WithFalseConstraint)\r\n                    .When(q => true)\r\n                        .ByEvaluating((q, p) => WithTrueConstraint);\r\n            });\r\n\r\n            \"when calling answer with expressions with constraints\"._(() =>\r\n            {\r\n                answer = engine.Answer(new WhatIsTheText());\r\n            });\r\n\r\n            \"it should evaluate expressions without constraints\"._(() =>\r\n            {\r\n                answer.Should().Contain(NoConstraint);\r\n            });\r\n\r\n            \"it should evaluate expressions with fulfilled constraints\"._(() =>\r\n            {\r\n                answer.Should().Contain(WithTrueConstraint);\r\n            });\r\n\r\n            \"it should ignore expressions with constraints that are not fulfilled\"._(() =>\r\n            {\r\n                answer.Should().NotContain(WithFalseConstraint);\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFinished!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}